### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Mutation {
  login(input: UserLoginInput!): UserLoginPayload!
  roomCreate(input: RoomCreateInput!): RoomCreatePayload
  signup(input: UserSignupInput!): UserSignupPayload!
}

interface Node {
  """Relay ID"""
  id: ID!
}

type Query {
  me: User
  node(id: ID!): Node
}

"""Must and only use for input"""
scalar RelayId

type Room implements Node {
  host: User!

  """Relay ID"""
  id: ID!
  name: String
  participants: [User!]!
}

input RoomCreateInput {
  name: String
  participantIds: [ID!]!
}

type RoomCreatePayload {
  room: Room
}

type User implements Node {
  avatar: String
  email: String!
  firstName: String!

  """Relay ID"""
  id: ID!
  lastName: String!
}

input UserLoginInput {
  email: String!
  password: String!
}

type UserLoginPayload {
  jwt: String!
  user: User!
}

input UserSignupInput {
  avatar: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type UserSignupPayload {
  jwt: String!
  user: User!
}
