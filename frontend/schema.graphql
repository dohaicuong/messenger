### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Message implements Node {
  author: User!
  content: String!

  """Relay ID"""
  id: ID!
}

type MessageConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [MessageEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type MessageEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Message
}

input MessageSendInput {
  content: String!
  roomId: RelayId!
}

type MessageSendPayload {
  message: Message
}

input MessageSentInput {
  roomId: RelayId!
}

type MessageSentPayload {
  message: Message
}

type Mutation {
  login(input: UserLoginInput!): UserLoginPayload!
  messageSend(input: MessageSendInput!): MessageSendPayload
  roomAddUser(input: RoomAddUserInput!): RoomAddUserPayload
  roomCreate(input: RoomCreateInput!): RoomCreatePayload
  signup(input: UserSignupInput!): UserSignupPayload!
}

interface Node {
  """Relay ID"""
  id: ID!
}

input OthersConnectionWhere {
  name: String
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  me: User
  node(id: ID!): Node
}

"""Must and only use for input"""
scalar RelayId

type Room implements Node {
  host: User!

  """Relay ID"""
  id: ID!
  messages(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): MessageConnection!
  name: String
  participants: [User!]!
}

input RoomAddUserInput {
  participantId: RelayId!
  roomId: RelayId!
}

type RoomAddUserPayload {
  participant: User
}

type RoomConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [RoomEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input RoomCreateInput {
  name: String
  participantIds: [RelayId!]!
}

type RoomCreatePayload {
  room: Room
}

type RoomEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Room
}

type Subscription {
  messageSent(input: MessageSentInput!): MessageSentPayload
}

type User implements Node {
  avatar: String
  email: String!
  firstName: String!

  """Relay ID"""
  id: ID!
  lastName: String!
  name: String!
  others(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    where: OthersConnectionWhere
  ): UserConnection!
  rooms(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
  ): RoomConnection!
}

type UserConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User
}

input UserLoginInput {
  email: String!
  password: String!
}

type UserLoginPayload {
  jwt: String!
  user: User!
}

input UserSignupInput {
  avatar: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type UserSignupPayload {
  jwt: String!
  user: User!
}
